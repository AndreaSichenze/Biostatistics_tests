import pandas as pd
from scipy.stats import chi2_contingency, ttest_ind
import matplotlib.pyplot as plt

# Test del chi-squared per le variabili categoriche
def chisquare_test(df, var1, var2):
    contingency_table = pd.crosstab(df[var1], df[var2])
    stat, p, dof, expected = chi2_contingency(contingency_table)
    return p

# Test t di Student (a campioni indipendenti) per variabili numeriche
def ttest_ind_test(df, target_variable, grouping_variable):
    group1 = df[df[grouping_variable] == 0][target_variable]
    group2 = df[df[grouping_variable] == 1][target_variable]

    t_stat, p_value = ttest_ind(group1, group2)
    return p_value

# Esecuzione dei test
def run_tests(df, target_variable, categorical_vars, numeric_vars):
    results = {}

    for var in categorical_vars:
        p_value = chisquare_test(df, target_variable, var)
        print(f"Chi-squared test for '{target_variable}' vs '{var}': p-value = {p_value}")
        results[f'{var} [chi]'] = {'p_value': p_value, 'test': 'Chi-squared'}

    for var in numeric_vars:
        p_value = ttest_ind_test(df, target_variable, var)
        print(f"Independent t-test for '{target_variable}' vs '{var}': p-value = {p_value}")
        results[f'{var} [t]'] = {'p_value': p_value, 'test': 't-test'}

    return results

# Plot Barchart
def plot_results(results, target_variable):
    p_values = {var: result['p_value'] for var, result in results.items()}
    sorted_p_values = dict(sorted(p_values.items(), key=lambda item: item[1], reverse=True))

    labels = list(sorted_p_values.keys())
    values = list(sorted_p_values.values())
    colors = ['skyblue' if p > 0.005 else 'red' for p in values]

    plt.figure(figsize=(12, 8))
    bars = plt.barh(labels, values, color=colors)

    plt.title(f'P-value in relationship with {target_variable}')
    plt.ylabel('Variables')
    plt.xlabel('P-value')

    # Cambia il colore delle etichette sull'asse y
    ax = plt.gca()  # Ottieni l'asse corrente
    y_labels = ax.get_yticklabels()  # Ottieni le etichette dell'asse y
    for i, label in enumerate(y_labels):
        if values[i] < 0.005:
            label.set_color('red')

    plt.axvline(x=0.005, color='red', linestyle='--', label='Î± = 0.005')
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Esecuzione
df = pd.read_csv('/content/drive/MyDrive/Stage/EHR_Datasets/10_7717_peerj_5665_dataYM2018_neuroblastoma.csv')
target_variable = 'outcome'
categorical_vars = ['sex', 'site', 'stage', 'risk', 'autologous_stem_cell_transplantation', 'radiation', 'degree_of_differentiation', 'UH_or_FH', 'MYCN_status ', 'surgical_methods']
numeric_vars = ['age', 'time_months']

results = run_tests(df, target_variable, categorical_vars, numeric_vars)

plot_results(results, target_variable)
